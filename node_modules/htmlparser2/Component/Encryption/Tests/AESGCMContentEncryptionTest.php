h"],
                    (float)$bp["left"]["width"]
                ];

                $y = $bottom_row["y"] + $bottom_row["height"] + $bp["bottom"]["width"] / 2;
                $border_bottom_width = max($border_bottom_width, $widths[2]);

                $method = "_border_" . $bp["bottom"]["style"];
                $border_function_calls[] = [$method, [$x, $y, $w, $bp["bottom"]["color"], $widths, "bottom", "square"]];
            } else {
                $adjacent_bp = $cellmap->get_border_properties($i+1, $j);
                $border_bottom_width = max($border_bottom_width, $adjacent_bp["top"]["width"]);
            }
        }

        $j = $cells["columns"][0];

        $left_col = $cellmap->get_column($j);

        if (in_array($num_cols - 1, $cells["columns"])) {
            $draw_right = true;
            $right_col = $cellmap->get_column($num_cols - 1);
        } else {
            $draw_right = false;
        }

        // Draw the vertical borders
        foreach ($cells["rows"] as $i) {
            $bp = $cellmap->get_border_properties($i, $j);
            $row = $cellmap->get_row($i);

            $x = $left_col["x"] - $bp["left"]["width"] / 2;
            $y = $row["y"] - $bp["top"]["width"] / 2;
            $h = $row["height"] + ($bp["top"]["width"] + $bp["bottom"]["width"]) / 2;

            if ($bp["left"]["width"] > 0) {
                $widths = [
                    (float)$bp["top"]["width"],
                    (float)$bp["right"]["width"],
                    (float)$bp["bottom"]["width"],
                    (float)$bp["left"]["width"]
                ];

                $border_left_width = max($border_left_width, $widths[3]);

                $method = "_border_" . $bp["left"]["style"];
                $border_function_calls[] = [$method, [$x, $y, $h, $bp["left"]["color"], $widths, "left", "square"]];
            }

            if ($draw_right) {
                $bp = $cellmap->get_border_properties($i, $num_cols - 1);
                if ($bp["right"]["width"] <= 0) {
                    continue;
                }

                $widths = [
                    (float)$bp["top"]["width"],
                    (float)$bp["right"]["width"],
                    (float)$bp["bottom"]["width"],
                    (float)$bp["left"]["width"]
                ];

                $x = $right_col["x"] + $right_col["used-width"] + $bp["right"]["width"] / 2;
                $border_right_width = max($border_right_width, $widths[1]);

                $method = "_border_" . $bp["right"]["style"];
                $border_function_calls[] = [$method, [$x, $y, $h, $bp["right"]["color"], $widths, "right", "square"]];
            } else {
                $adjacent_bp = $cellmap->get_border_properties($i, $j+1);
                $border_right_width = max($border_right_width, $adjacent_bp["left"]["width"]);
            }
        }

        // Draw our background, border and content
        if (($bg = $style->background_color) !== "transparent") {
            $this->_canvas->filled_rectangle(
                $background_position_x + ($border_left_width/2),
                $background_position_y + ($border_top_width/2),
                (float)$background_width - (($border_left_width + $border_right_width)/2),
                (float)$background_height - (($border_top_width + $border_bottom_width)/2),
                $bg
            );
        }
        if (($url = $style->background_image) && $url !== "none") {
            $this->_background_image(
                $url,
                $background_position_x + ($border_left_width/2),
                $background_position_y + ($border_top_width/2),
                (float)$background_width - (($border_left_width + $border_right_width)/2),
                (float)$background_height - (($border_top_width + $border_bottom_width)/2),
                $style
            );
        }
        foreach ($border_function_calls as $border_function_call_params)
        {
            call_user_func_array([$this, $border_function_call_params[0]], $border_function_call_params[1]);
        